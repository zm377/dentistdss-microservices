package press.mizhifei.dentist.auth.service;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import press.mizhifei.dentist.auth.model.User;
/**
 * @author zhifeimi
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class EmailService {

    private final JavaMailSender mailSender;
    
    @Value("${app.email.from-email:${spring.mail.username}}")
    private String fromEmail;

    @Async
    public void sendVerificationEmail(String to, String emailVerificationToken) {
        try {
            sendAVerificationEmail(to, emailVerificationToken, "token");
        } catch (MessagingException e) {
            log.error("Failed to send verification email to {}: {}", to, e.getMessage());
            throw new RuntimeException("Could not send verification email", e);
        }
    }

    @Async
    public void sendVerificationCode(String to, String verificationCode) {
        try {
            sendAVerificationEmail(to, verificationCode, "code");
        } catch (MessagingException e) {
            log.error("Failed to send verification code to {}: {}", to, e.getMessage());
            throw new RuntimeException("Could not send verification code", e);
        }
    }

    private void sendAVerificationEmail(String to, String vString, String type) throws MessagingException {
        String subject = "Complete Your Registration - DentistDSS";
        String plainTextContent = String.format(
            "Hi dear user!\n\n" +
            "This is an email auto-generated by the DentistDSS system because you are signing up for an account.\n\n" +
            "Your verification %s is: %s. Which will expire in %s.\n\n" +
            "If it's not you, please ignore this email.\n\n" +
            "Thanks,\n" +
            "The DentistDSS Team", 
            type, vString, type == "code" ? "10 minutes" : "30 days");
        sendEmail(to, subject, plainTextContent);
    }

    @Async
    public void sendProcessingReminderEmail(User clinicAdmin, String firstName, String lastName, String email, String role) {
        try {
            sendAProveRequestEmail(clinicAdmin.getEmail(), email, firstName, lastName, role, clinicAdmin.getClinicName());
        } catch (MessagingException e) {
            log.error("Failed to send processing reminder email to {}: {}", email, e.getMessage());
            throw new RuntimeException("Could not send processing reminder email", e);
        }
    }

    private void sendAProveRequestEmail(String to, String email, String firstName, String lastName, String role, String clinicName) throws MessagingException {
        String subject = "Approve a new staff registration";
        String content = String.format(
            "Hi dear Admin!\n\n" +
            "This is an email auto-generated by the DentistDSS system.\n\n" +
            "We sent you this email because there is a new clinic staff %s %s, %s.\n\n" +
            "Who is requesting to register as a %s in clinic: %s.\n\n" +
            "Please approve the request in the DentistDSS system.\n\n" +
            "Thanks,\n" +
            "The DentistDSS Team", 
            firstName, lastName, email, role, clinicName);
        sendEmail(to, subject, content);
    }

    private void sendEmail(String to, String subject, String content) throws MessagingException {
        MimeMessage message = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
        
        helper.setFrom(fromEmail);
        helper.setTo(to);
        helper.setSubject(subject);
        
        helper.setText(content, false);
        
        mailSender.send(message);
        log.info("Verification email sent to {}", to);
        
    }
} 